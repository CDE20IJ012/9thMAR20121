Spring boot and MVC impementation
-------------------------------------------------------

Two types of controllers:-

* Controller  ( Where we go for handler method/methods
which are mapped to some display. In our case the 
display is in the form of jsp)
* RestController ( In RestController we don't concentrate more on the view because in that case for the view we have other services which are totally 
independent application and are designed with 
angular/ReactJS).


---------------------------------------------------
Let us see one examle where we design RestController
and display a string "Hello World!!!";

* For that let us follow the following steps"

1) File ====> New===> Spring Starter Project
2) Select for the dependency in the dialog box selected as web
    web. ( we dont have to add any dependency from the site called maven repository )
     	        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
3) We created a controller and we were careful to create the package so if the class with main 
   method which is executing the Spring Boot application is within the package com.demo
   We try to keep the controller within com.demo.package ( So we try to keep the controller within the
   sub package of the package where the class with main method is in ).  
 
package com.demo.cts.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloWorld {

	@GetMapping("/")
	public String greet()
	{
		return "Hello World!!!!";
	}
}
----------------------------------------------------------------------------------------------------------
Spring Boot MVC 
So in this example will have hello.jsp which will be called by the Controller. 
The controller will @Controller and not the @RestController.
1) File ====> New===> Spring Starter Project
2) Select for the dependency in the dialog box called New Spring Starter Project Dependencies.
   Go for selecting Spring Web
3) Here in pom.xml we have add a dependency so that the JSPs are interpreted.
   <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

    <!-- This is not a starter project so get the dependency from maven repository site -->		
	<dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>


4) Let us create our jsp file and get it stored. 
   So it has to be within src===> main ===> just create a folder with the name webapp ( wenapp folder
   won't be there). Within webapp create a folder WEB-INF.
5) create a folder with the name views/jsps/pages.
6) Now create the jsp pages and keep in the folder with the name views/jsps/pages.
We created hello.jsp within
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
    Hello World!!!!
</body>
</html>
7) Let us create a controller ===> @Controller

package com.demo.cts.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HelloWorld {

	
	@GetMapping("/")
	public String greet()
	{
		return "hello";
	}
}
8) Update application.properties 
    server.port=9999
    spring.mvc.view.prefix=/WEB-INF/pages/
    spring.mvc.view.suffix=.jsp



-------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
Passing parameters/data from the jsp file.
insert.jsp
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
   <table>
    <form action="bookadd" method="post">
       Book ID<input type="text" name="id">
       Book Title<input type="text" name="title">
       <input type="submit"/>  
    </form>   
     </table>
</body>
</html>


The following kind of writing is required when we are not using EL ( Expression
Language )

success.jsp

<%@ page import="com.demo.cts.model.Book" language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1" isELIgnored=false %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
    Book Added!!!!!!!!
    The details are as follows:-
     <% Book book=(Book)request.getAttribute("bookDetails"); %>
    <%=book.getBookId() %>
    <%=book.getBookTitle() %> 
    
</body>
</html>


This is after enabling the EL .

<%@ page import="com.demo.cts.model.Book" language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1" isELIgnored=false %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
    Book Added!!!!!!!!
   ${bookdetails.bookId}
   ${bookdetails.bookTitle} 
 </body>
</html>

-----------------------------------

controller

BookController.java

package com.demo.cts.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.demo.cts.model.Book;

@Controller
public class BookController {

	
	@GetMapping("/")
	public String insertBook()
	{
		return "insert";
	}
	
	@PostMapping("/bookadd")
	public String bookAdd(Model map, @RequestParam int id, @RequestParam String title)
	{
	      Book book=new Book(); // model object
	      book.setBookId(id);   // we are storing the data which is passed as parameters
	      book.setBookTitle(title);
	      System.out.println(book.getBookId());
	      System.out.println(book.getBookTitle());
	      System.out.println(book);
	      map.addAttribute("bookdetails", book);
	      return "success";
	      
	}
}

------------------------------
model

Book.java

package com.demo.cts.model;

public class Book {

	private int bookId;
	private String bookTitle;
	public Book() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Book(int bookId, String bookTitle) {
		super();
		this.bookId = bookId;
		this.bookTitle = bookTitle;
	}
	public int getBookId() {
		return bookId;
	}
	public void setBookId(int bookId) {
		this.bookId = bookId;
	}
	public String getBookTitle() {
		return bookTitle;
	}
	public void setBookTitle(String bookTitle) {
		this.bookTitle = bookTitle;
	}
	
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + bookId;
		result = prime * result + ((bookTitle == null) ? 0 : bookTitle.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Book other = (Book) obj;
		if (bookId != other.bookId)
			return false;
		if (bookTitle == null) {
			if (other.bookTitle != null)
				return false;
		} else if (!bookTitle.equals(other.bookTitle))
			return false;
		return true;
	}
	@Override
	public String toString() {
		return "Book [bookId=" + bookId + ", bookTitle=" + bookTitle + "]";
	}
	
	
	
}
--------------------------------------------------------------------------------------------------------------






